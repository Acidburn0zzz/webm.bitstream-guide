

#### A.2 Frame Header

<div class="col1-pre" markdown="1">

| Frame Header                                          | Type  |
|-------------------------------------------------------|-------|
| INDENT01 if (key_frame) {                             |       |
| INDENT10   `color_space`                              | L(1)  |
| INDENT10   `clamping_type`                            | L(1)  |
| INDENT01 }                                            |       |
| INDENT00 `segmentation_enabled`                       | L(1)  |
| INDENT01 if (segmentation_enabled) {                  |       |
| INDENT10   update_segmentation()                      |       |
| INDENT01 }                                            |       |
| INDENT00 `filter_type`                                | L(1)  |
| INDENT00 `loop_filter_level`                          | L(6)  |
| INDENT00 `sharpness_level`                            | L(3)  |
| INDENT01 mb_lf_adjustments()                          |       |
| INDENT00 `log2_nbr_of_dct_partitions`                 | L(2)  |
| INDENT01 quant_indices()                              |       |
| INDENT01 if (key_frame) {                             |       |
| INDENT10   `refresh_entropy_probs`                    | L(1)  |
| INDENT01 } else {                                     |       |
| INDENT10   `refresh_golden_frame`                     | L(1)  |
| INDENT10   `refresh_alternate_frame`                  | L(1)  |
| INDENT11   if (!refresh_golden_frame)                 |       |
| INDENT20     `copy_buffer_to_golden`                  | L(2)  |
| INDENT11   if (!refresh_alternate_frame)              |       |
| INDENT20     `copy_buffer_to_alternate`               | L(2)  |
| INDENT10   `sign_bias_golden`                         | L(1)  |
| INDENT10   `sign_bias_alternate`                      | L(1)  |
| INDENT10   `refresh_entropy_probs`                    | L(1)  |
| INDENT10   `refresh_last`                             | L(1)  |
| INDENT01 }                                            |       |
| INDENT01 token_prob_update()                          |       |
| INDENT00 `mb_no_coeff_skip`                           | L(1)  |


| Frame Header                                          | Type  |
|-------------------------------------------------------|-------|
| INDENT00 `prob_skip_false`                            | L(8)  |
| INDENT01 if (!key_frame) {                            |       |
| INDENT10   `prob_intra`                               | L(8)  |
| INDENT10   `prob_last`                                | L(8)  |
| INDENT10   `prob_golden`                              | L(8)  |
| INDENT10   `intra_16x16_prob_update_flag`             | L(1)  |
| INDENT11   if (intra_16x16_prob_update_flag) {        |       |
| INDENT21     for (i = 0; i < 4; i++)                  |       |
| INDENT30       `intra_16x16_prob`                     | L(8)  |
| INDENT11   }                                          |       |
| INDENT10   `intra_chroma prob_update_flag`            | L(1)  |
| INDENT11   if (intra_chroma_prob_update_flag) {       |       |
| INDENT21     for (i = 0; i < 3; i++)                  |       |
| INDENT30       `intra_chroma_prob`                    | L(8)  |
| INDENT11   }                                          |       |
| INDENT11   mv_prob_update()                           |       |
| INDENT01 }                                            |       |

</div>


  * `color_space` defines the YUV color space of the sequence ([9.2](#h-00.11.2))
  * `clamping_type` specifies if the decoder is required to clamp the reconstructed pixel values ([9.2](#h-00.11.2))
  * `segmentation_enabled` enables the segmentation feature for the current frame ([9.3](#h-00.11.3)) 
  * `filter_type` determines whether the normal or the simple loop filter is used ([9.4](#h-00.11.4), [15](#h-00.17))
  * `loop_filter_level` controls the deblocking filter ([9.4](#h-00.11.4), [15](#h-00.17))
  * `sharpness_level` controls the deblocking filter ([9.4](#h-00.11.4), [15](#h-00.17))
  * `log2_nbr_of_dct_partitions` determines the number of separate partitions containing the DCT coefficients of the macroblocks ([9.5](#h-00.11.5))
  * `refresh_entropy_probs` determines whether updated token probabilities are used only for this frame or until further update
  * `refresh_golden_frame` determines if the current decoded frame refreshes the golden frame ([9.7](#h-00.11.7))
  * `refresh_alternate_frame` determines if the current decoded frame refreshes the alternate reference frame ([9.7](#h-00.11.7))
  * `copy_buffer_to_golden` determines if the golden reference is replaced by another reference ([9.7](#h-00.11.7))
  * `copy_buffer_to_alternate` determines if the alternate reference is replaced by another reference ([9.7](#h-00.11.7))
  * `sign_bias_golden` controls the sign of motion vectors when the golden frame is referenced ([9.7](#h-00.11.7))
  * `sign_bias_alternate` controls the sign of motion vectors when the alternate frame is referenced ([9.7](#h-00.11.7))
  * `refresh_last` determines if the current decoded frame refreshes the last frame reference buffer ([9.8](#h-00.11.8))
  * `mb_no_coeff_skip` enables or disables the skipping of macroblocks containing no non-zero coefficients ([9.10](#h-00.11.10))
  * `prob_skip_false` the probability that the macroblock is not skipped (flag indicating skipped macroblock is false) ([9.10](#h-00.11.10))
  * `prob_intra` the probability of an intra macroblock ([9.10](#h-00.11.10))
  * `prob_last` the probability that the last reference frame is used for inter prediction ([9.10](#h-00.11.10))
  * `prob_golden` the probability that the golden reference frame is used for inter prediction ([9.10](#h-00.11.10))
  * `intra_16x16_prob_update_flag` indicates if the branch probabilies used in the decoding of luma intra prediction mode are updated ([9.10](#h-00.11.10))
  * `intra_16x16_prob` the branch probabilities of the luma intra prediction mode decoding tree
  * `intra_chroma_prob_update_flag` indicates if the branch probabilies used in the decoding of chroma intra prediction mode are updated ([9.10](#h-00.11.10))
  * `intra_chroma_prob` the branch probabilities of the chroma intra prediction mode decoding tree


<div class="col1-pre" markdown="1">

| update_segmentation()                                 | Type  |
|-------------------------------------------------------|-------|
| INDENT00 `update_mb_segmentation_map`                 | L(1)  |
| INDENT00 `update_segment_feature_data`                | L(1)  |
| INDENT01 if (update_segment_feature_data) {           |       |
| INDENT10   `segment_feature_mode`                     | L(1)  |
| INDENT11   for (i = 0; i < 4; i++) {                  |       |
| INDENT20     `quantizer_update`                       | L(1)  |
| INDENT21     if (quantizer_update) {                  |       |
| INDENT30       `quantizer_update_value`               | L(7)  |
| INDENT30       `quantizer_update_sign`                | L(1)  |
| INDENT21     }                                        |       |
| INDENT11   }                                          |       |
| INDENT11   for (i = 0; i < 4; i++) {|       |
| INDENT20     `loop_filter_update`                     | L(1)  |
| INDENT21     if (loop_filter_update) {              |       |
| INDENT30       `lf_update_value`                      | L(6)  |
| INDENT30       `lf_update_sign`                       | L(1)  |
| INDENT21     }                                        |       |
| INDENT11   }                                          |       |
| INDENT01 }                                            |       |
| INDENT01 if (update_mb_segmentation_map) {          |       |
| INDENT11   for (i = 0; i < 3; i++) {                  |       |
| INDENT20     `segment_prob_update`                    | L(1)  |
| INDENT21     if (segment_prob_update) {             |       |
| INDENT30       `segment_prob`                         | L(8)  |
| INDENT21     }                                        |       |
| INDENT11   }                                          |       |
| INDENT01 }                                            |       |

</div>


  * `update_mb_segmentation_map` determines if the MB segmentation map is updated in the current frame ([9.3](#h-00.11.3))
  * `update_segment_feature_data` indicates if the segment feature data is updated in the current frame ([9.3](#h-00.11.3))
  * `segment_feature_mode` indicates the feature data update mode, 0 for delta and 1 for the absolute value ([9.3](#h-00.11.3))
  * `quantizer_update` indicates if the quantizer value is updated for the [[ i^(th) ]] segment ([9.3](#h-00.11.3))
  * `quantizer_update_value` indicates the update value for the segment quantizer ([9.3](#h-00.11.3))
  * `quantizer_update_sign` indicates the update sign for the segment quantizer ([9.3](#h-00.11.3))
  * `loop_filter_update` indicates if the loop filter level value is updated for the [[ i^(th) ]] segment ([9.3](#h-00.11.3))
  * `lf_update_value` indicates the update value for the loop filter level ([9.3](#h-00.11.3))
  * `lf_update_sign` indicates the update sign for the loop filter level ([9.3](#h-00.11.3))
  * `segment_prob_update` indicates if the branch probabilities used to decode the `segment_id` in the MB header are decoded from the stream or use the default value of 255 ([9.3](#h-00.11.3))
  * `segment_prob` the branch probabilities of the `segment_id` decoding tree ([9.3](#h-00.11.3))


<div class="col1-pre" markdown="1">

| mb_lf_adjustments()                                   | Type  |
|-------------------------------------------------------|-------|
| INDENT00 `loop_filter_adj_enable`                     | L(1)  |
| INDENT01 if (loop_filter_adj_enable) {                |       |
| INDENT10   `mode_ref_lf_delta_update`                 | L(1)  |
| INDENT11   if (mode_ref_lf_delta_update) {            |       |
| INDENT21     for (i = 0; i < 4; i++) {                |       |
| INDENT30       `ref_frame_delta_update_flag`          | L(1)  |
| INDENT31       if (ref_frame_delta_update_flag) {     |       |
| INDENT40         `delta_magnitude`                    | L(6)  |
| INDENT40         `delta_sign`                         | L(1)  |
| INDENT31       }                                      |       |
| INDENT21     }                                        |       |
| INDENT21     for (i = 0; i < 4; i++) {                |       |
| INDENT30       `mb_mode_delta_update_flag`            | L(1)  |
| INDENT31       if (mb_mode_delta_update_flag) {       |       |
| INDENT40         `delta_magnitude`                    | L(6)  |
| INDENT40         `delta_sign`                         | L(1)  |
| INDENT31       }                                      |       |
| INDENT21     }                                        |       |
| INDENT11   }                                          |       |
| INDENT01 }                                            |       |

</div>


  * `loop_filter_adj_enable` indicates if the MB-level loop filter adjustment (based on the used reference frame and coding mode) is on for the current frame ([9.4](#h-00.11.4))
  * `mode_ref_lf_delta_update` indicates if the delta values used in adjustment are updated in the current frame ([9.4](#h-00.11.4))
  * `ref_frame_delta_update_flag` indicates if the adjustment delta value corresponding to a certain used reference frame is updated ([9.4](#h-00.11.4))
  * `delta_magnitude` is the absolute value of the delta value
  * `delta_sign` is the sign of the delta value
  * `mb_mode_delta_update_flag` indicates if the adjustment delta value corresponding to certain MB prediction mode is updated ([9.4](#h-00.11.4))


<div class="col1-pre" markdown="1">

| quant_indices()                                       | Type  |
|-------------------------------------------------------|-------|
| INDENT00 `y_ac_qi`                                    | L(7)  |
| INDENT00 `y_dc_delta_present`                         | L(1)  |
| INDENT01 if (y_dc_delta_present) {                    |       |
| INDENT10   `y_dc_delta_magnitude`                     | L(4)  |
| INDENT10   `y_dc_delta_sign`                          | L(1)  |
| INDENT01 }                                            |       |
| INDENT01 if (y2_dc_delta_present) {                   |       |
| INDENT10   `y2_dc_delta_magnitude`                    | L(4)  |
| INDENT10   `y2_dc_delta_sign`                         | L(1)  |
| INDENT01 }                                            |       |
| INDENT01 if (y2_ac_delta_present) {                   |       |
| INDENT10   `y2_ac_delta_magnitude`                    | L(4)  |
| INDENT10   `y2_ac_delta_sign`                         | L(1)  |
| INDENT01 }                                            |       |
| INDENT01 if (uv_dc_delta_present) {                   |       |
| INDENT10   `uv_dc_delta_magnitude`                    | L(4)  |
| INDENT10   `uv_dc_delta_sign`                         | L(1)  |
| INDENT01 }                                            |       |
| INDENT01 if (uv_ac_delta_present) {                   |       |
| INDENT10   `uv_ac_delta_magnitude`                    | L(4)  |
| INDENT10   `uv_ac_delta_sign`                         | L(1)  |
| INDENT01 }                                            |       |

</div>


  * `y_ac_qi` is the dequantization table index used for the luma AC coefficients (and other coefficient groups if no delta value is present) ([9.6](#h-00.11.6))
  * `y_dc_delta_present` indicates if the stream contains a delta value that is added to the baseline index to obtain the luma DC coefficient dequantization index ([9.6](#h-00.11.6))
  * `y_dc_delta_magnitude` the magnitude of the delta value ([9.6](#h-00.11.6))
  * `y_dc_delta_sign` the sign of the delta value ([9.6](#h-00.11.6))
  * `y2_dc_delta_present` indicates if the stream contains a delta value that is added to the baseline index to obtain the Y2 block DC coefficient dequantization index ([9.6](#h-00.11.6))
  * `y2_ac_delta_present` indicates if the stream contains a delta value that is added to the baseline index to obtain the Y2 block AC coefficient dequantization index ([9.6](#h-00.11.6))
  * `uv_dc_delta_present` indicates if the stream contains a delta value that is added to the baseline index to obtain the chroma DC coefficient dequantization index ([9.6](#h-00.11.6))
  * `uv_ac_delta_present` indicates if the stream contains a delta value that is added to the baseline index to obtain the chroma AC coefficient dequantization index ([9.6](#h-00.11.6))


<div class="col1-pre" markdown="1">

| token_prob_update()                                   | Type  |
|-------------------------------------------------------|-------|
| INDENT01 for (i = 0; i < 4; i++) {                    |       |
| INDENT11   for (j = 0; j < 8; j++) {                  |       | 
| INDENT21     for (k = 0; k < 3; k++) {                |       |
| INDENT31       for (l = 0; l < 11; l++) {             |       |
| INDENT40         `coeff_prob_update_flag`             | L(1)  |
| INDENT41         if (coeff_prob_update_flag) {      |       |
| INDENT50           `coeff_prob`                       | L(8)  |
| INDENT41         }                                    |       |
| INDENT31       }                                      |       |
| INDENT21     }                                        |       |
| INDENT11   }                                          |       |
| INDENT01 }                                            |       |

</div>


  * `coeff_prob_update_flag` indicates if the corresponding branch probability is updated in the current frame ([13.4](#h-00.15.4))
  * `coeff_prob` is the new branch probability ([13.4](#h-00.15.4))


<div class="col1-pre" markdown="1">

| mv_prob_update()                                      | Type  |
|-------------------------------------------------------|-------|
| INDENT01 for (i = 0; i < 2; i++) {                    |       |
| INDENT11   for (j = 0; j < 19; j++) {                 |       | 
| INDENT20     `mv_prob_update_flag`                    | L(1)  |
| INDENT21     if (mv_prob_update_flag) {               |       |
| INDENT30       `prob`                                 | L(7)  |
| INDENT21     }                                        |       |
| INDENT11   }                                          |       |
| INDENT01 }                                            |       |

</div>


  * `mv_prob_update_flag` indicates if the corresponding MV decoding probability is updated in the current frame ([17.2](#h-00.19.2))
  * `prob` is the updated probability ([17.2](#h-00.19.2))
